# This yaml configuration file contains all the steps necessary for the
# installation and testing.
# General terminilogy is the following:
# 
# project:
#   install:
#     - step
#     - step
#     ...
#     - step
#
#   test:
#     - step
#     - step
#     ...
#     - step




# variables surrounded with @ are replaced with variables defined (eg @this@)
# in the variables.yaml. In this way the config.yaml script can be the same 
# for the several servers even though the paths are different 
# on each server (home folder, etc)
dolfin:
  # cwd value, if not exists will be created
  workdir: "@fenics-home@"

  # shell script which will activate singularity module
  # will be executed before calling singularity exec
  # prepare-singularity: |
  #    # echo 'loading singularity module'
  #    module load singularity/2.4
  #    #module load mpt
  #    module load intel-compilers-17
  #    #export MPI_SHEPHERD=true


  # this section is executed before every step is called
  # it can be useful when loading complex environment
  prepare-env: |
        # load modules
        @module-cmd@ purge
        @module-cmd@ load anaconda/python3
        @module-cmd@ load intel-mpi-17
        @module-cmd@ load gcc/6.2.0
        @module-cmd@ load metis-5.1.0-gcc-6.2.0-hgihnkn
        @module-cmd@ load boost-1.64.0-gcc-6.2.0-pftxg46
        @module-cmd@ load hdf5-1.10.0-patch1-gcc-6.2.0-wtjz5my
        @module-cmd@ load zlib-1.2.11-gcc-6.2.0-si4k2lc
        @module-cmd@ load suite-sparse-4.5.3-gcc-6.2.0-d4rusma
        @module-cmd@ load parmetis-4.0.3-intel-17.0.2-6cjoas3 #!
        @module-cmd@ load cmake-3.10.0-gcc-6.3.0-b4fybij
        @module-cmd@ list

        # export important variables
        export FENICS_SRC_DIR=@fenics-home@
        export FENICS_PERFORMANCE_TESTS=@performance-tests-home@

        export PETSC_DIR=@petsc-dir@
        export SLEPC_DIR=@scotch-dir@
        export EIGEN3_INCLUDE_DIR=@eigen-dir@

        export FENICS_PREFIX=$FENICS_SRC_DIR/install
        export FENICS_PYTHON=python3
        export FENICS_BUILD_TYPE=Release
        export USE_PYTHON3=$($FENICS_PYTHON -c "import sys; print('OFF' if sys.version_info.major == 2 else 'ON')")
        export CMAKE_EXTRA_ARGS="$CMAKE_EXTRA_ARGS"

        export PYTHON_VERSION=$($FENICS_PYTHON -c 'import sys; print(".".join(map(str, sys.version_info[:2])))')
        export PYTHONPATH=$FENICS_PREFIX/lib/python$PYTHON_VERSION/site-packages:$PYTHONPATH
        export CMAKE_PREFIX_PATH=$SLEPC_DIR:$CMAKE_PREFIX_PATH

        # Use GCC compilers
        export FC=gfortran
        export CC=gcc
        export CXX=g++
        export MPI_C=mpicc
        export MPI_CXX=mpicxx


  # list of installation *steps*
  install:
    # each step can contain a shell script which will be executed
    - name: clone-repo
      description: Checkout repository to a specific commit
      enabled: true
      verbose: false
      
      # if singularity is set, it will be executed inside singularity image
      # singularity: "@singularity-image@"

      # each step can be connected to a multiple repositories
      # by default latest commit from master will be used
      git:
        - url: https://bitbucket.org/fenics-project/fiat.git
        - url: https://bitbucket.org/fenics-project/dijitso.git
        - url: https://bitbucket.org/fenics-project/instant.git
        - url: https://bitbucket.org/fenics-project/ufl.git
        - url: https://bitbucket.org/fenics-project/ffc.git

        # you can specify which repository will be at which commit via 
        # bin/install --commit=reponame:commit
        # this will prevent situations where we are testing specific commit
        # but before the script is executed, another commit was pushed to the repo
        - url: https://bitbucket.org/fenics-project/dolfin.git
          commit: "{arg[commit][dolfin]}" # checkout to this commit
          branch: "{arg[branch][dolfin]}" # under this branch's name

      # additional shell which is executed AFTER the git stuff
      shell: |
        # pip fails in while writing in tmp dir if files are not writable
        # this happens with /.git/objects/
          chmod -R +w @fenics-home@

    - name: install-fenics
      description: Installing fenics and its components
      enabled: true
      verbose: false

      # each shell script is formatted using python's str.format method
      # this allows us to use dynamic variables defined globally
      # (in the variables.yaml) or in this section
      # for example to print value of this section description in a shell script we write
      # echo {step[description]}
      shell: |
        set -x
        $CXX --version
        $MPI_CXX --version

        # remove previous installation
        rm -rf "$FENICS_PREFIX"

        # install all projects
        projects="fiat dijitso instant ufl ffc dolfin"

        for project in $projects; do
            path="$FENICS_SRC_DIR/$project"
            if [ -e $path/CMakeLists.txt ]; then
                build="$FENICS_SRC_DIR/$project/build-$FENICS_PYTHON"
                rm -rf $build
                mkdir -p $build
                cd "$build"

                cmake ../ \
                    -DCMAKE_INSTALL_PREFIX=$FENICS_PREFIX \
                    -DCMAKE_BUILD_TYPE=$FENICS_BUILD_TYPE \
                    -DPYTHON_EXECUTABLE:FILEPATH=$(which $FENICS_PYTHON) \
                    -DDOLFIN_SKIP_BUILD_TESTS=OFF -DSCOTCH_DEBUG=On \
                    -DEIGEN3_INCLUDE_DIR=$EIGEN3_INCLUDE_DIR \
                    -Wno-dev $CMAKE_EXTRA_ARGS
                make -j16
                make -j16 install
                source $FENICS_SRC_DIR/install/share/dolfin/dolfin.conf
            else
                cd $FENICS_SRC_DIR/$project
                $FENICS_PYTHON -m pip install --prefix=$FENICS_PREFIX --no-deps --upgrade .
            fi
        done
        echo $FENICS_PREFIX

    - name: install-tests
      description: Install the benchmark tests
      enabled: true
      verbose: false
      # singularity: "@singularity-image@"
      shell: |
        source $FENICS_SRC_DIR/install/share/dolfin/dolfin.conf
        cat $FENICS_SRC_DIR/install/share/dolfin/dolfin.conf
        echo cd $FENICS_PERFORMANCE_TESTS/src
        cd $FENICS_PERFORMANCE_TESTS/src
        # git pull

        echo "dolfin version: $(dolfin-version)"
        ffc -l dolfin *.ufl
        rm -rf build
        mkdir -p build
        cd build
        cmake .. && make
        ldd ./dolfin-scaling-test
        ./dolfin-scaling-test


  # test section is again list of *steps*
  # each test suite can contain more tests based on configuration variables
  test:
    - enabled: true
      verbose: true
      repeat: 3
      # singularity: "@singularity-image@"
      name: "{cpu_count}x-scale-{problem[type]}-{problem[scale]}-{problem[ndofs]}"
      description: simple scaling test for poisson and elasticity

      # configuration variables (aka Build Matrix) section will create multiple test cases in this test suite
      # configuration variables is a list, where each item is a pair (writen as list of dict of size 1)
      # where first value is a name of the value and second value are values fot his specific values
      #
      # e.g if we have 2 variables a=[1, 2, 3], b=[foo, bar]
      # Matrix of all possible combinations will be:
      # 6 test cases in total (3 * 2)
      # the first test case will have variables a=1, b=foo
      # the last  test case will have variables a=3, b=bar
      #
      # this configuration variables can be useful for scaling tests or tests which differ in a single variable
      # this variables are accessible in the shell script body via:
      # {variable_name}
      # or the variable is dictionary, via:
      # {variable_name[key_name]}
      configuration:
        
        # TODO: ? find out what I wanted to do with this variable
        # I suppose I wanted to merge the jobs with the same amount of cores
        # under a single job, to have more precise job requirements (not sure)
        merge: cpu_count
        
        # here is the Build Matrix, it can contain list of values and even
        # list of dictionaries
        variables:
          - cpu_count: @cpu-count@
          - problem:
              - type: poisson
                scale: weak
                ndofs: 100000     #   100 000 per core

              - type: elasticity
                scale: weak
                ndofs: 50000      #    50 000 per core

              - type: poisson
                scale: strong
                ndofs: 1000000    # 1 000 000 in total

              - type: elasticity
                scale: strong
                ndofs: 500000     #   500 000 in total



          # !range tag, its values are passed to the python's range() builtin function
          # meaning !range 1 3 will result in list [1, 2]
          #         !range 3 8 2 in [3, 5, 7]

      # collection section will collect json and yaml documents from the stdout
      # try to find artifacts which will be collected and stores in separates files
      # for now only dictionary-like structures are supported (json, yaml)
      collect:
        - type: json
          # location where the json files will be stored
          dir: "@fenics-home@/artifacts"
          
          # they are two modes which can detect json/yaml documents in the stdout
          # split, which splits the stdout and try to parse results or start and
          # stop, which searches to the start/stop string and parses the result
          split: !repeat '- 77'
          
          # for start/stop mode only
          # if true, will keep the symbols (such as part of the json file)
          # keep: true
          #start: '{'
          #stop: '}'

          # each valid document can be altered/enriched by other variables,
          # which may not be included in the json/yaml document after the 
          # parsing is done.
          # section tags defines variables which will be added to a final document
          # variables can be both static or a dynamic. There will be a section
          # 'tags' in the final document, hopefully nothing will be in the 
          # conflict with it.
          tags:
            problem_type: "{problem[type]}"
            problem_scale: "{problem[scale]}"
            problem_ndofs: "{problem[ndofs]}"
            cpu_count: "{cpu_count}"
            datetime: "{time[iso]}"
            hostname: "cirrus"
            dolfin: "dolfin"

          # convert certain fields to other types after enrichement is done
          # slash / separates paths in dictionary
          # syntax supports regular expressions
          int_fields:
            - problem/size
            - tags/problem_ndofs
            - tags/cpu_count
            - system/num_cpus
            - result/num_iter
          float_fields:
            - '.*/wall_.*'
          datetime_fields:
            - tags/datetime
          
          database:
            # TODO add option to separate config to make configuration more secure
            # config-file: part/to/config/file.yaml
            
            # configuration for the database
            # feel free to see the result with read-only access
            # @ mongoDB Atlas
            mongodb:
              host:           hpc-ci-shard-00-02-23axu.mongodb.net
              username:       reader
              password:       REVzD59QWERtCl4y
              port:           27017
              authSource:     admin
              authMechanism:  SCRAM-SHA-1
              ssl:            true
          
      
      # once again shell script body, this time including plenty of dynamicity
      shell: |
        echo "{cpu_count}x-scale-{problem[type]}-{problem[scale]}-{problem[ndofs]}"
        cd $FENICS_PERFORMANCE_TESTS/src/build

          # singularity exec @singularity-image@ \
          # mpirun -np {cpu_count} singularity exec @singularity-image@ $FENICS_PERFORMANCE_TESTS/src/build/
          mpirun -np {cpu_count} ./dolfin-scaling-test \
              --problem_type {problem[type]} \
              --scaling_type {problem[scale]} \
              --ndofs {problem[ndofs]} \
              --petsc.log_view \
              --petsc.ksp_view \
              --petsc.ksp_type cg \
              --petsc.ksp_rtol 1.0e-8 \
              --petsc.pc_type hypre \
              --petsc.pc_hypre_type boomeramg \
              --petsc.pc_hypre_boomeramg_strong_threshold 0.5 \
              --petsc.options_left
