#!/bin/bash

# this script will start CI-HPC for given project
# This shell script starts the main python script with --execute flag set to local
# 
# usage: run-local [-h] --project PROJECT [--git-url GIT_URL]
#                  [--git-commit GIT_COMMIT] [--git-branch GIT_BRANCH]
#                  [--config-dir CONFIG_DIR] [--execute {local,pbs}]
#                  [--timeout TIMEOUT] [--check-interval CHECK_INTERVAL]
#                  [step [step ...]]

# 
# positional arguments:
#   step
# 
# optional arguments:
#   -h, --help            show this help message and exit
#   --project PROJECT     Name of the project.
#                         Based on this value, proper configuration will be
#                         loaded (assuming --config-dir) was not set.
#   --git-url GIT_URL     URL of the git repository. It has no usage for now but 
#                         it is planned in the future, where configuration may be
#                         part of the repository
#   --git-commit REPOID:GIT_COMMIT
#                         SHA of the commit to work with.
#                         If no value is provided, will be checkout out to the
#                         last commit.
#   --git-branch REPOID:GIT_BRANCH
#                         Name of the branch to check out.
#                         If --git-commit is given, resulting git HEAD
#                         will be renamed to this value.
#                             This is useful when running commits from the past
#                             (there will be no detached state nor branch HEAD.)
#
#                         Default value is "master"
#   --config-dir CONFIG_DIR
#                         Path to the directory, where config.yaml (and optionally
#                         variables.yaml) file is/are located. If no value is set
#                         default value will cfg/<project>,
#                         where <project> is name of the project given.
#   --execute {local,pbs}
#                         If set, will generate bash file where it calls itself 
#                         once again, but without --generate flag.
#   --timeout TIMEOUT, -t TIMEOUT
#                         If --execute is pbs (or any value besides local) will wait for the job to finish.
#                         By default there is no timeout. Specify in seconds.
#   --check-interval CHECK_INTERVAL
#                         If --execute is pbs (or any value besides local) will wait for the job to finish.
#                         Interval, in which the script quiries the HPC for the job status.
#                         Specify in seconds.

ROOT="$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." && pwd )"
python3 $ROOT/ci-hpc/main.py $*
